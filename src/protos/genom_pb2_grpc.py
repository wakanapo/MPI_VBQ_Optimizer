# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import genom_pb2 as genom__pb2


class GenomEvaluationStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetIndividual = channel.unary_unary(
        '/GenomEvaluation.GenomEvaluation/GetIndividual',
        request_serializer=genom__pb2.Genoms.SerializeToString,
        response_deserializer=genom__pb2.Individual.FromString,
        )
    self.GetIndividualMock = channel.unary_unary(
        '/GenomEvaluation.GenomEvaluation/GetIndividualMock',
        request_serializer=genom__pb2.Genoms.SerializeToString,
        response_deserializer=genom__pb2.Individual.FromString,
        )


class GenomEvaluationServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetIndividual(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetIndividualMock(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GenomEvaluationServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetIndividual': grpc.unary_unary_rpc_method_handler(
          servicer.GetIndividual,
          request_deserializer=genom__pb2.Genoms.FromString,
          response_serializer=genom__pb2.Individual.SerializeToString,
      ),
      'GetIndividualMock': grpc.unary_unary_rpc_method_handler(
          servicer.GetIndividualMock,
          request_deserializer=genom__pb2.Genoms.FromString,
          response_serializer=genom__pb2.Individual.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'GenomEvaluation.GenomEvaluation', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
